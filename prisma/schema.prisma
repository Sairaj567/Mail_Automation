generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  COMPANY
  ADMIN
}

enum JobType {
  INTERNSHIP @map("internship")
  FULL_TIME  @map("fulltime")
  PART_TIME  @map("parttime")
  REMOTE     @map("remote")
}

enum ExperienceLevel {
  FRESHER     @map("fresher")
  ZERO_TO_TWO @map("0-2")
  TWO_TO_FIVE @map("2-5")
  FIVE_PLUS   @map("5+")
}

enum ApplicationStatus {
  APPLIED      @map("applied")
  UNDER_REVIEW @map("under_review")
  SHORTLISTED  @map("shortlisted")
  INTERVIEW    @map("interview")
  REJECTED     @map("rejected")
  ACCEPTED     @map("accepted")
}

enum EducationStatus {
  PURSUING  @map("pursuing")
  COMPLETED @map("completed")
}

enum InterviewType {
  PHONE     @map("phone")
  VIDEO     @map("video")
  IN_PERSON @map("in_person")
}

enum CommunicationType {
  EMAIL            @map("email")
  MESSAGE          @map("message")
  INTERVIEW_INVITE @map("interview_invite")
  STATUS_UPDATE    @map("status_update")
}

enum CommunicationSender {
  STUDENT @map("student")
  COMPANY @map("company")
  SYSTEM  @map("system")
}

enum ChatSender {
  STUDENT @map("student")
  COMPANY @map("company")
}

enum CompanySize {
  ONE_TO_TEN                   @map("1-10")
  ELEVEN_TO_FIFTY              @map("11-50")
  FIFTYONE_TO_TWOHUNDRED       @map("51-200")
  TWOHUNDREDONE_TO_FIVEHUNDRED @map("201-500")
  FIVEHUNDREDONE_TO_THOUSAND   @map("501-1000")
  THOUSAND_PLUS                @map("1000+")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  role       UserRole
  isVerified Boolean  @default(false)
  isDemo     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  studentProfile StudentProfile?
  companyProfile CompanyProfile?
  jobs           Job[]           @relation("UserJobs")
  applications   Application[]   @relation("StudentApplications")
  resumes        Resume[]
  sessions       Session[]
}

model StudentProfile {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  college           String?
  course            String?
  specialization    String?
  graduationYear    Int?
  cgpa              Float?
  phone             String?
  dateOfBirth       DateTime?
  skills            String[]  @default([])
  linkedin          String?
  github            String?
  portfolio         String?
  resumePath        String?
  profileCompletion Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user      User              @relation(fields: [userId], references: [id])
  savedJobs StudentSavedJob[]
}

model CompanyProfile {
  id            Int          @id @default(autoincrement())
  userId        Int          @unique
  companyName   String
  industry      String?
  website       String?
  description   String?
  logo          String?
  contactPerson String?
  phone         String?
  street        String?
  city          String?
  state         String?
  country       String?
  zipCode       String?
  size          CompanySize?
  founded       Int?
  linkedin      String?
  twitter       String?
  facebook      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  user User  @relation(fields: [userId], references: [id])
  jobs Job[] @relation("CompanyJobs")
}

model Job {
  id                  Int              @id @default(autoincrement())
  title               String
  companyName         String
  companyLogo         String?
  location            String
  jobType             JobType
  salary              String
  description         String
  requirements        String[]         @default([])
  responsibilities    String[]         @default([])
  skills              String[]         @default([])
  experienceLevel     ExperienceLevel?
  applicationDeadline DateTime?
  isActive            Boolean          @default(true)
  postedById          Int?
  companyProfileId    Int?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  postedBy       User?             @relation("UserJobs", fields: [postedById], references: [id])
  companyProfile CompanyProfile?   @relation("CompanyJobs", fields: [companyProfileId], references: [id])
  applications   Application[]
  savedBy        StudentSavedJob[]
}

model StudentSavedJob {
  studentProfileId Int
  jobId            Int
  createdAt        DateTime @default(now())

  studentProfile StudentProfile @relation(fields: [studentProfileId], references: [id])
  job            Job            @relation(fields: [jobId], references: [id])

  @@id([studentProfileId, jobId])
}

model Application {
  id                Int               @id @default(autoincrement())
  studentId         Int
  jobId             Int
  fullName          String
  email             String
  phone             String?
  linkedin          String?
  college           String?
  degree            String?
  educationStatus   EducationStatus?
  graduationYear    Int?
  cgpa              Float?
  marksType         String?
  skills            String[]          @default([])
  projects          String?
  extracurricular   String?
  resumePath        String
  coverLetterPath   String?
  coverLetterText   String?
  status            ApplicationStatus @default(APPLIED)
  appliedAt         DateTime          @default(now())
  eligibilityOk     Boolean           @default(false)
  interviewDate     DateTime?
  interviewType     InterviewType?
  interviewLink     String?
  interviewLocation String?
  interviewNotes    String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  student        User                       @relation("StudentApplications", fields: [studentId], references: [id])
  job            Job                        @relation(fields: [jobId], references: [id])
  communications ApplicationCommunication[]
  chatMessages   ApplicationChatMessage[]

  @@unique([jobId, studentId])
  @@index([status])
}

model ApplicationCommunication {
  id            Int                 @id @default(autoincrement())
  applicationId Int
  type          CommunicationType
  content       String
  sentBy        CommunicationSender
  timestamp     DateTime            @default(now())

  application Application @relation(fields: [applicationId], references: [id])

  @@index([applicationId])
}

model ApplicationChatMessage {
  id            Int        @id @default(autoincrement())
  applicationId Int
  sender        ChatSender
  message       String
  read          Boolean    @default(false)
  timestamp     DateTime   @default(now())

  application Application @relation(fields: [applicationId], references: [id])

  @@index([applicationId])
}

model Resume {
  id         Int      @id @default(autoincrement())
  userId     Int
  url        String
  parsedJson Json?
  score      Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Session {
  sid     String   @id
  data    Json
  expires DateTime
  userId  Int?

  user User? @relation(fields: [userId], references: [id])

  @@index([expires])
}
